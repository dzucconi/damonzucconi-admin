import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of AddArtworkEntityMutation */
export type AddArtworkEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  entity: EntityAttributes;
  id: Scalars['ID'];
};

/** Autogenerated return type of AddArtworkEntityMutation */
export type AddArtworkEntityMutationPayload = {
  __typename?: 'AddArtworkEntityMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddArtworkMutation */
export type AddArtworkMutationInput = {
  attributes: ArtworkAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of AddArtworkMutation */
export type AddArtworkMutationPayload = {
  __typename?: 'AddArtworkMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** An artwork */
export type Artwork = {
  __typename?: 'Artwork';
  attachments: Array<Attachment>;
  collector_byline?: Maybe<Scalars['String']>;
  created_at: Scalars['String'];
  depth?: Maybe<Scalars['Float']>;
  description?: Maybe<Scalars['String']>;
  dimensions?: Maybe<Dimensions>;
  duration?: Maybe<Scalars['String']>;
  editions: Array<Edition>;
  embeds: Array<Embed>;
  gloss?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  images: Array<Image>;
  intent: Scalars['String'];
  links: Array<Link>;
  material?: Maybe<Scalars['String']>;
  position: Scalars['Int'];
  slug: Scalars['String'];
  src?: Maybe<Scalars['String']>;
  state: Scalars['String'];
  title: Scalars['String'];
  unit?: Maybe<Scalars['String']>;
  updated_at: Scalars['String'];
  width?: Maybe<Scalars['Float']>;
  year: Scalars['Int'];
};


/** An artwork */
export type ArtworkCreated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** An artwork */
export type ArtworkDescriptionArgs = {
  format?: InputMaybe<Format>;
};


/** An artwork */
export type ArtworkImagesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<Array<State>>;
};


/** An artwork */
export type ArtworkLinksArgs = {
  kind?: InputMaybe<Array<Kind>>;
  state?: InputMaybe<Array<State>>;
};


/** An artwork */
export type ArtworkUpdated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};

export type ArtworkAttributes = {
  depth?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
  gloss?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  material?: InputMaybe<Scalars['String']>;
  state: State;
  title: Scalars['String'];
  unit?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Float']>;
  year: Scalars['Int'];
};

/** An attachment */
export type Attachment = {
  __typename?: 'Attachment';
  id: Scalars['String'];
  kind?: Maybe<Scalars['String']>;
  state: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

/** Curriculum Vitae */
export type Cv = {
  __typename?: 'Cv';
  categories: Array<CvCategory>;
};

/** A single category in the CV */
export type CvCategory = {
  __typename?: 'CvCategory';
  name: Scalars['String'];
  years: Array<CvYear>;
};

/** A single row in the CV */
export type CvEntry = {
  __typename?: 'CvEntry';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  to_html: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  venue?: Maybe<Scalars['String']>;
};

/** A single year in the CV */
export type CvYear = {
  __typename?: 'CvYear';
  entries: Array<CvEntry>;
  year: Scalars['Int'];
};

/** Dimensions */
export type Dimension = {
  __typename?: 'Dimension';
  depth?: Maybe<Scalars['Float']>;
  height?: Maybe<Scalars['Float']>;
  to_s?: Maybe<Scalars['String']>;
  unit?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
};

/** Dimensions in metric and imperial */
export type Dimensions = {
  __typename?: 'Dimensions';
  centimeters: Dimension;
  inches: Dimension;
};

/** An edition */
export type Edition = {
  __typename?: 'Edition';
  collector?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  is_attributable: Scalars['Boolean'];
  location?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  state: Scalars['String'];
};

/** An embed */
export type Embed = {
  __typename?: 'Embed';
  html?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type EntityAttributes = {
  image?: InputMaybe<ImageAttributes>;
};

/** An exhibition */
export type Exhibition = {
  __typename?: 'Exhibition';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  created_at: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  end_date?: Maybe<Scalars['String']>;
  external_url?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  images: Array<Image>;
  kind: Scalars['String'];
  slug?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updated_at: Scalars['String'];
  venue?: Maybe<Scalars['String']>;
  year?: Maybe<Scalars['Int']>;
};


/** An exhibition */
export type ExhibitionCreated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** An exhibition */
export type ExhibitionDescriptionArgs = {
  format?: InputMaybe<Format>;
};


/** An exhibition */
export type ExhibitionEnd_DateArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** An exhibition */
export type ExhibitionImagesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<Array<State>>;
};


/** An exhibition */
export type ExhibitionStart_DateArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};


/** An exhibition */
export type ExhibitionUpdated_AtArgs = {
  format?: InputMaybe<Scalars['String']>;
  relative?: InputMaybe<Scalars['Boolean']>;
};

export enum Format {
  Html = 'HTML',
  Plain = 'PLAIN'
}

/** An image */
export type Image = {
  __typename?: 'Image';
  description?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
  largest_side_display_size?: Maybe<Scalars['Int']>;
  position: Scalars['Int'];
  resized: ResizedImage;
  scale?: Maybe<Scalars['Float']>;
  state: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
  width?: Maybe<Scalars['Int']>;
};


/** An image */
export type ImageResizedArgs = {
  blur?: InputMaybe<Scalars['Float']>;
  height?: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  scale?: InputMaybe<Scalars['Float']>;
  sharpen?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type ImageAttributes = {
  height?: InputMaybe<Scalars['Int']>;
  largestSideDisplaySize?: InputMaybe<Scalars['Int']>;
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  url: Scalars['String'];
  width?: InputMaybe<Scalars['Int']>;
};

export enum Kind {
  Canonical = 'CANONICAL',
  Default = 'DEFAULT'
}

/** A link */
export type Link = {
  __typename?: 'Link';
  id: Scalars['String'];
  kind: Scalars['String'];
  state: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  add_artwork?: Maybe<AddArtworkMutationPayload>;
  add_artwork_entity?: Maybe<AddArtworkEntityMutationPayload>;
  update_artwork?: Maybe<UpdateArtworkMutationPayload>;
};


export type MutationAdd_ArtworkArgs = {
  input: AddArtworkMutationInput;
};


export type MutationAdd_Artwork_EntityArgs = {
  input: AddArtworkEntityMutationInput;
};


export type MutationUpdate_ArtworkArgs = {
  input: UpdateArtworkMutationInput;
};

/** The query root for this schema */
export type Query = {
  __typename?: 'Query';
  /** An artwork */
  artwork: Artwork;
  artworks: Array<Artwork>;
  cv: Cv;
  /** An exhibition */
  exhibition: Exhibition;
  exhibitions: Array<Exhibition>;
  presigned_upload_urls: Array<Scalars['String']>;
  /** An representation */
  representation: Representation;
  representations: Array<Representation>;
  /** System status */
  status: Status;
};


/** The query root for this schema */
export type QueryArtworkArgs = {
  id: Scalars['ID'];
};


/** The query root for this schema */
export type QueryArtworksArgs = {
  state?: InputMaybe<Array<InputMaybe<State>>>;
};


/** The query root for this schema */
export type QueryExhibitionArgs = {
  id: Scalars['ID'];
};


/** The query root for this schema */
export type QueryExhibitionsArgs = {
  state?: InputMaybe<Array<InputMaybe<State>>>;
};


/** The query root for this schema */
export type QueryPresigned_Upload_UrlsArgs = {
  types: Array<SupportedUpload>;
};


/** The query root for this schema */
export type QueryRepresentationArgs = {
  id: Scalars['ID'];
};

/** A representation of some other type */
export type Representation = {
  __typename?: 'Representation';
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  images: Array<Image>;
  mode: Scalars['String'];
  position: Scalars['Int'];
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

/** A resized image */
export type ResizedImage = {
  __typename?: 'ResizedImage';
  factor: Scalars['Float'];
  height: Scalars['Int'];
  ratio: Scalars['Float'];
  urls: RetinaImage;
  width: Scalars['Int'];
};

/** A retina image */
export type RetinaImage = {
  __typename?: 'RetinaImage';
  _1x: Scalars['String'];
  _2x: Scalars['String'];
  _3x: Scalars['String'];
};

export enum State {
  Archived = 'ARCHIVED',
  Draft = 'DRAFT',
  Published = 'PUBLISHED',
  Selected = 'SELECTED'
}

/** System status */
export type Status = {
  __typename?: 'Status';
  authenticated: Scalars['Boolean'];
  up: Scalars['Boolean'];
};

export enum SupportedUpload {
  Gif = 'GIF',
  Jpeg = 'JPEG',
  Png = 'PNG'
}

export type UpdateArtworkAttributes = {
  depth?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  duration?: InputMaybe<Scalars['String']>;
  gloss?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  material?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<State>;
  title?: InputMaybe<Scalars['String']>;
  unit?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Float']>;
  year?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated input type of UpdateArtworkMutation */
export type UpdateArtworkMutationInput = {
  attributes: UpdateArtworkAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateArtworkMutation */
export type UpdateArtworkMutationPayload = {
  __typename?: 'UpdateArtworkMutationPayload';
  artwork: Artwork;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type ArtworkAttachmentsFragment = { __typename?: 'Artwork', attachments: Array<{ __typename?: 'Attachment', id: string, title?: string | null, url: string, state: string }> };

export type ArtworkAttributesFragment = { __typename?: 'Artwork', id: string, slug: string, state: string, title: string, year: number, material?: string | null, duration?: string | null, gloss?: string | null, description?: string | null, dimensions?: { __typename?: 'Dimensions', inches: { __typename?: 'Dimension', width?: number | null, height?: number | null, depth?: number | null, unit?: string | null } } | null };

export type ArtworkEditionsFragment = { __typename?: 'Artwork', editions: Array<{ __typename?: 'Edition', id: string, state: string, collector?: string | null, location?: string | null, notes?: string | null, is_attributable: boolean }> };

export type ArtworkEmbedsFragment = { __typename?: 'Artwork', id: string, embeds: Array<{ __typename?: 'Embed', id: string, html?: string | null }> };

export type ArtworkImagesFragment = { __typename?: 'Artwork', id: string, images: Array<{ __typename?: 'Image', id: string, thumbnail: { __typename?: 'ResizedImage', height: number, width: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string } } }> };

export type ArtworkLinksFragment = { __typename?: 'Artwork', id: string, links: Array<{ __typename?: 'Link', id: string, url: string, title?: string | null, kind: string, state: string }> };

export type FilesUploaderQueryVariables = Exact<{
  fileTypes: Array<SupportedUpload> | SupportedUpload;
}>;


export type FilesUploaderQuery = { __typename?: 'Query', presigned_upload_urls: Array<string> };

export type ArtworkIndexPageQueryVariables = Exact<{ [key: string]: never; }>;


export type ArtworkIndexPageQuery = { __typename?: 'Query', artworks: Array<{ __typename?: 'Artwork', id: string, state: string, slug: string, title: string }> };

export type AddArtworkMutationVariables = Exact<{
  attributes: ArtworkAttributes;
}>;


export type AddArtworkMutation = { __typename?: 'Mutation', add_artwork?: { __typename?: 'AddArtworkMutationPayload', artwork: { __typename?: 'Artwork', id: string, slug: string } } | null };

export type ArtworkShowPageArtworkFragment = { __typename?: 'Artwork', id: string, slug: string, state: string, title: string, year: number, material?: string | null, duration?: string | null, gloss?: string | null, description?: string | null, primaryImage: Array<{ __typename?: 'Image', id: string, thumbnail: { __typename?: 'ResizedImage', height: number, width: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string } } }>, dimensions?: { __typename?: 'Dimensions', inches: { __typename?: 'Dimension', width?: number | null, height?: number | null, depth?: number | null, unit?: string | null } } | null, images: Array<{ __typename?: 'Image', id: string, thumbnail: { __typename?: 'ResizedImage', height: number, width: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string } } }>, links: Array<{ __typename?: 'Link', id: string, url: string, title?: string | null, kind: string, state: string }>, embeds: Array<{ __typename?: 'Embed', id: string, html?: string | null }>, attachments: Array<{ __typename?: 'Attachment', id: string, title?: string | null, url: string, state: string }>, editions: Array<{ __typename?: 'Edition', id: string, state: string, collector?: string | null, location?: string | null, notes?: string | null, is_attributable: boolean }> };

export type ArtworkShowPageQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ArtworkShowPageQuery = { __typename?: 'Query', artwork: { __typename?: 'Artwork', id: string, slug: string, state: string, title: string, year: number, material?: string | null, duration?: string | null, gloss?: string | null, description?: string | null, primaryImage: Array<{ __typename?: 'Image', id: string, thumbnail: { __typename?: 'ResizedImage', height: number, width: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string } } }>, dimensions?: { __typename?: 'Dimensions', inches: { __typename?: 'Dimension', width?: number | null, height?: number | null, depth?: number | null, unit?: string | null } } | null, images: Array<{ __typename?: 'Image', id: string, thumbnail: { __typename?: 'ResizedImage', height: number, width: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string } } }>, links: Array<{ __typename?: 'Link', id: string, url: string, title?: string | null, kind: string, state: string }>, embeds: Array<{ __typename?: 'Embed', id: string, html?: string | null }>, attachments: Array<{ __typename?: 'Attachment', id: string, title?: string | null, url: string, state: string }>, editions: Array<{ __typename?: 'Edition', id: string, state: string, collector?: string | null, location?: string | null, notes?: string | null, is_attributable: boolean }> } };

export type ArtworkShowPageUpdateMutationVariables = Exact<{
  id: Scalars['ID'];
  attributes: UpdateArtworkAttributes;
}>;


export type ArtworkShowPageUpdateMutation = { __typename?: 'Mutation', update_artwork?: { __typename?: 'UpdateArtworkMutationPayload', artwork: { __typename?: 'Artwork', id: string, slug: string, state: string, title: string, year: number, material?: string | null, duration?: string | null, gloss?: string | null, description?: string | null, primaryImage: Array<{ __typename?: 'Image', id: string, thumbnail: { __typename?: 'ResizedImage', height: number, width: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string } } }>, dimensions?: { __typename?: 'Dimensions', inches: { __typename?: 'Dimension', width?: number | null, height?: number | null, depth?: number | null, unit?: string | null } } | null, images: Array<{ __typename?: 'Image', id: string, thumbnail: { __typename?: 'ResizedImage', height: number, width: number, urls: { __typename?: 'RetinaImage', _1x: string, _2x: string } } }>, links: Array<{ __typename?: 'Link', id: string, url: string, title?: string | null, kind: string, state: string }>, embeds: Array<{ __typename?: 'Embed', id: string, html?: string | null }>, attachments: Array<{ __typename?: 'Attachment', id: string, title?: string | null, url: string, state: string }>, editions: Array<{ __typename?: 'Edition', id: string, state: string, collector?: string | null, location?: string | null, notes?: string | null, is_attributable: boolean }> } } | null };

export const ArtworkAttributesFragmentDoc = gql`
    fragment ArtworkAttributesFragment on Artwork {
  id
  slug
  state
  title
  year
  material
  dimensions {
    inches {
      width
      height
      depth
      unit
    }
  }
  duration
  gloss
  description
}
    `;
export const ArtworkImagesFragmentDoc = gql`
    fragment ArtworkImagesFragment on Artwork {
  id
  images {
    id
    thumbnail: resized(width: 256, height: 256) {
      height
      width
      urls {
        _1x
        _2x
      }
    }
  }
}
    `;
export const ArtworkLinksFragmentDoc = gql`
    fragment ArtworkLinksFragment on Artwork {
  id
  links {
    id
    url
    title
    kind
    state
  }
}
    `;
export const ArtworkEmbedsFragmentDoc = gql`
    fragment ArtworkEmbedsFragment on Artwork {
  id
  embeds {
    id
    html
  }
}
    `;
export const ArtworkAttachmentsFragmentDoc = gql`
    fragment ArtworkAttachmentsFragment on Artwork {
  attachments {
    id
    title
    url
    state
  }
}
    `;
export const ArtworkEditionsFragmentDoc = gql`
    fragment ArtworkEditionsFragment on Artwork {
  editions {
    id
    state
    collector
    location
    notes
    is_attributable
  }
}
    `;
export const ArtworkShowPageArtworkFragmentDoc = gql`
    fragment ArtworkShowPageArtworkFragment on Artwork {
  id
  ...ArtworkAttributesFragment
  primaryImage: images(limit: 1) {
    id
    thumbnail: resized(width: 400, height: 400) {
      height
      width
      urls {
        _1x
        _2x
      }
    }
  }
  ...ArtworkImagesFragment
  ...ArtworkLinksFragment
  ...ArtworkEmbedsFragment
  ...ArtworkAttachmentsFragment
  ...ArtworkEditionsFragment
}
    ${ArtworkAttributesFragmentDoc}
${ArtworkImagesFragmentDoc}
${ArtworkLinksFragmentDoc}
${ArtworkEmbedsFragmentDoc}
${ArtworkAttachmentsFragmentDoc}
${ArtworkEditionsFragmentDoc}`;
export const FilesUploaderQueryDocument = gql`
    query FilesUploaderQuery($fileTypes: [SupportedUpload!]!) {
  presigned_upload_urls(types: $fileTypes)
}
    `;

export function useFilesUploaderQuery(options: Omit<Urql.UseQueryArgs<FilesUploaderQueryVariables>, 'query'>) {
  return Urql.useQuery<FilesUploaderQuery>({ query: FilesUploaderQueryDocument, ...options });
};
export const ArtworkIndexPageQueryDocument = gql`
    query ArtworkIndexPageQuery {
  artworks {
    id
    state
    slug
    title
  }
}
    `;

export function useArtworkIndexPageQuery(options?: Omit<Urql.UseQueryArgs<ArtworkIndexPageQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworkIndexPageQuery>({ query: ArtworkIndexPageQueryDocument, ...options });
};
export const AddArtworkMutationDocument = gql`
    mutation AddArtworkMutation($attributes: ArtworkAttributes!) {
  add_artwork(input: {attributes: $attributes}) {
    artwork {
      id
      slug
    }
  }
}
    `;

export function useAddArtworkMutation() {
  return Urql.useMutation<AddArtworkMutation, AddArtworkMutationVariables>(AddArtworkMutationDocument);
};
export const ArtworkShowPageQueryDocument = gql`
    query ArtworkShowPageQuery($id: ID!) {
  artwork(id: $id) {
    ...ArtworkShowPageArtworkFragment
  }
}
    ${ArtworkShowPageArtworkFragmentDoc}`;

export function useArtworkShowPageQuery(options: Omit<Urql.UseQueryArgs<ArtworkShowPageQueryVariables>, 'query'>) {
  return Urql.useQuery<ArtworkShowPageQuery>({ query: ArtworkShowPageQueryDocument, ...options });
};
export const ArtworkShowPageUpdateMutationDocument = gql`
    mutation ArtworkShowPageUpdateMutation($id: ID!, $attributes: UpdateArtworkAttributes!) {
  update_artwork(input: {id: $id, attributes: $attributes}) {
    artwork {
      ...ArtworkShowPageArtworkFragment
    }
  }
}
    ${ArtworkShowPageArtworkFragmentDoc}`;

export function useArtworkShowPageUpdateMutation() {
  return Urql.useMutation<ArtworkShowPageUpdateMutation, ArtworkShowPageUpdateMutationVariables>(ArtworkShowPageUpdateMutationDocument);
};